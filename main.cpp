#include "soll.h"

#include <iostream>

int main()
{
	SOLL<int> soll;
	std::cout << "Size = " << soll.size() << "\n";
	std::cout << "Is empty? " << std::boolalpha << soll.empty() << "\n";
	std::cout << "Pushing elements 15, 5, 24, 14, 45 in back, and 36, 45, 54 in front...\n";
	soll.push_back(15);
	soll.print();
	soll.push_back(5);
	soll.print();
	soll.push_back(24);
	soll.print();
	soll.push_back(14);
	soll.print();
	soll.push_front(36);
	soll.print();
	soll.push_front(45);
	soll.print();
	soll.push_front(54);
	soll.print();
	soll.push_front(45);
	soll.print();
	soll.push_front(11);
	soll.print();
	soll.push_front(54);
	soll.print();
	std::cout << "Size = " << soll.size() << "\n";
	std::cout << "Printing elements in ascending order...\n";
	soll.printSorted();
	std::cout << "Printing elements in descending order...\n";
	soll.printDescendingOrder();
	std::cout << "Front element: " << soll.front() << "\n";
	std::cout << "Back element: " << soll.back() << "\n";
	std::cout << "Creating copy of list....\nList2...\n";
	SOLL<int> list(soll);
	list.print();
	std::cout << "Remove last element from list2...\n";
	list.pop_back();
	list.print();
	std::cout << "Remove first element...\n";
	list.pop_front();
	list.print();
	list.printSorted();
	list.printDescendingOrder();
	std::cout << "Remove first element...\n";
	list.pop_front();
	list.print();
	list.printSorted();
	list.printDescendingOrder();
	std::cout << "Emplace front 104 in list2...\n";
	list.emplace_front(104);
	list.print();
	list.printSorted();
	list.printDescendingOrder();
	std::cout << "Insert 36 in position 3 in list2...\n";
	list.insert(3, 36);
	list.print();
	list.printSorted();
	list.printDescendingOrder();
	std::cout << "Remove 4-rth element from list2...\n";
	list.erase(4);
	list.print();
	list.printSorted();
	list.printDescendingOrder();
	std::cout << "Remove all occurences of 36 from list2...\n";
	list.remove(36);
	list.print();
	list.printSorted();
	list.printDescendingOrder();
	std::cout << "Reverse list1...\n";
	soll.reverse();
	soll.print();
	soll.printSorted();
	soll.printDescendingOrder();
	std::cout << "Remove duplicates from list1...\n";
	soll.unique();
	soll.print();
	soll.printSorted();
	std::cout << "Creating new list...\n";
	std::cout << "List3...\n";
	SOLL<int> list2 = {12, 5, 4, 7};
	list2.print();
	list2.printSorted();
	list2.printDescendingOrder();
	std::cout << "Sorting list3...\n";
	list2.sort();
	list2.print();
	list2.printSorted();
	list2.printDescendingOrder();
	std::cout << "Swap list3 and list1 contents...\n";
	soll.swap(list2);
	std::cout << "First list after swapping...\n";
	soll.print();
	std::cout << "Third list after swapping...\n";
	list2.print();
	std::cout << "Merge list1 and list3...\n";
	soll.merge(soll, list2);
	soll.print();
	std::cout << "Create new list4 for chars and assign 5 time 'a' value...\n";
	SOLL<char> list3;
	list3.assign(5, 'a');
	list3.print();
	std::cout << "Compare list1 and list3...\n";
	std::cout << "(list1 == list2) " << std::boolalpha << (soll == list2) << "\n";
	std::cout << "(list1 != list2) " << std::boolalpha << (soll != list2) << "\n";
	std::cout << "(list1 > list2) " << std::boolalpha << (soll > list2) << "\n";
	std::cout << "(list1 < list2) " << std::boolalpha << (soll < list2) << "\n";
	std::cout << "(list1 >= list2) " << std::boolalpha << (soll >= list2) << "\n";
	std::cout << "(list1 <= list2) " << std::boolalpha << (soll <= list2) << "\n";

	return 0;
}